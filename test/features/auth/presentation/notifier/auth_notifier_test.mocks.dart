// Mocks generated by Mockito 5.4.4 from annotations
// in traqa/test/features/auth/presentation/notifier/auth_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:fpdart/fpdart.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:traqa/core/core.dart' as _i5;
import 'package:traqa/features/features.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SignInWithGoogleUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInWithGoogleUsecase extends _i1.Mock
    implements _i2.SignInWithGoogleUsecase {
  @override
  _i3.Future<_i4.Either<_i5.Failure, _i2.AuthEntity>> call(
          _i5.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i3.Future<_i4.Either<_i5.Failure, _i2.AuthEntity>>.value(
            _i6.dummyValue<_i4.Either<_i5.Failure, _i2.AuthEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i4.Either<_i5.Failure, _i2.AuthEntity>>.value(
                _i6.dummyValue<_i4.Either<_i5.Failure, _i2.AuthEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.Failure, _i2.AuthEntity>>);
}

/// A class which mocks [IsUserAuthenticatedUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsUserAuthenticatedUsecase extends _i1.Mock
    implements _i2.IsUserAuthenticatedUsecase {
  @override
  _i3.Future<_i4.Either<_i5.Failure, _i2.AuthModel>> call(
          _i5.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i3.Future<_i4.Either<_i5.Failure, _i2.AuthModel>>.value(
            _i6.dummyValue<_i4.Either<_i5.Failure, _i2.AuthModel>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i4.Either<_i5.Failure, _i2.AuthModel>>.value(
                _i6.dummyValue<_i4.Either<_i5.Failure, _i2.AuthModel>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.Failure, _i2.AuthModel>>);
}
